/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors. 
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.jboss.test.security.microcontainer.metadata;

import java.util.Map;

import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag;

import junit.framework.Assert;

import org.jboss.security.acl.config.ACLProviderEntry;
import org.jboss.security.audit.config.AuditProviderEntry;
import org.jboss.security.auth.container.config.AuthModuleEntry;
import org.jboss.security.auth.login.AuthenticationInfo;
import org.jboss.security.auth.login.JASPIAuthenticationInfo;
import org.jboss.security.auth.login.LoginModuleStackHolder;
import org.jboss.security.authorization.config.AuthorizationModuleEntry;
import org.jboss.security.config.ACLInfo;
import org.jboss.security.config.AuditInfo;
import org.jboss.security.config.AuthorizationInfo;
import org.jboss.security.config.IdentityTrustInfo;
import org.jboss.security.config.MappingInfo;
import org.jboss.security.identitytrust.config.IdentityTrustModuleEntry;
import org.jboss.security.mapping.config.MappingModuleEntry;

/**
 * <p>
 * This class validates the contents of the policies that have been registered with the security layer in the various
 * application-policy test scenarios.
 * </p>
 * 
 * @author <a href="mailto:sguilhen@redhat.com">Stefan Guilhen</a>
 */
public class PolicyValidator
{

   /**
    * <p>
    * Validates the contents of an {@code AuthenticationInfo} object that has been generated by the
    * {@code AuthenticationPolicyBean} that corresponds to the following authentication configuration:
    * 
    * <pre>
    *  &lt;authentication&gt;
    *     &lt;login-module code=&quot;org.jboss.security.auth.AuthModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;authOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/login-module&gt;
    *     &lt;login-module code=&quot;org.jboss.security.auth.AuthModule2&quot; flag=&quot;optional&quot;&gt;
    *        &lt;module-option name=&quot;authOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/login-module&gt;
    *  &lt;/authentication&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the authentication configuration.
    * @param authInfo the {@code AuthenticationInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateAuthenticationPolicy(String appPolicyName, AuthenticationInfo authInfo) throws Exception
   {

      Assert.assertNotNull("Authentication policy not found", authInfo);
      Assert.assertEquals("Authentication policy has unexpected name", appPolicyName, authInfo.getName());

      AppConfigurationEntry[] entries = authInfo.getAppConfigurationEntry();
      Assert.assertNotNull("Invalid AppConfigurationEntry array", entries);
      Assert.assertEquals("Unexpected number of configuration entries", 2, entries.length);

      // first entry should be the org.jboss.security.auth.AuthModule1.
      Assert.assertEquals("org.jboss.security.auth.AuthModule1", entries[0].getLoginModuleName());
      Assert.assertEquals(LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption1 was not found", options.containsKey("authOption1"));
      Assert.assertEquals("value1", options.get("authOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("authOption2"));
      Assert.assertEquals("value2", options.get("authOption2"));

      // second entry should be the org.jboss.security.auth.AuthModule2.
      Assert.assertEquals("org.jboss.security.auth.AuthModule2", entries[1].getLoginModuleName());
      Assert.assertEquals(LoginModuleControlFlag.OPTIONAL, entries[1].getControlFlag());
      options = entries[1].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption3 was not found", options.containsKey("authOption3"));
      Assert.assertEquals("value3", options.get("authOption3"));
      Assert.assertTrue("Option authOption4 was not found", options.containsKey("authOption4"));
      Assert.assertEquals("value4", options.get("authOption4"));
   }

   /**
    * <p>
    * Validates the contents of a {@code JASPIAuthenticationInfo} object that has been generated by the
    * {@code JASPIAuthenticationPolicyBean} that corresponds to the following authentication-jaspi configuration:
    * 
    * <pre>
    *  &lt;authentication-jaspi&gt;
    *     &lt;login-module-stack name=&quot;ModuleStack1&quot;&gt;
    *        &lt;login-module code=&quot;org.jboss.security.auth.AuthModule3&quot; flag=&quot;required&quot;&gt;
    *           &lt;module-option name=&quot;authOption5&quot;&gt;value5&lt;/module-option&gt;
    *        &lt;/login-module&gt;
    *        &lt;login-module code=&quot;org.jboss.security.auth.AuthModule4&quot; flag=&quot;optional&quot;/&gt;
    *     &lt;/login-module-stack&gt;
    *     &lt;login-module-stack name=&quot;ModuleStack2&quot;&gt;
    *        &lt;login-module code=&quot;org.jboss.security.auth.AuthModule5&quot; flag=&quot;required&quot;&gt;
    *           &lt;module-option name=&quot;authOption6&quot;&gt;value6&lt;/module-option&gt;
    *           &lt;module-option name=&quot;authOption7&quot;&gt;value7&lt;/module-option&gt;
    *        &lt;/login-module&gt;
    *     &lt;/login-module-stack&gt;
    *     &lt;auth-module code=&quot;org.jboss.security.auth.AuthModule1&quot; login-module-stack-ref=&quot;ModuleStack1&quot;/&gt;
    *     &lt;auth-module code=&quot;org.jboss.security.auth.AuthModule1&quot; login-module-stack-ref=&quot;ModuleStack2&quot;&gt;
    *        &lt;module-option name=&quot;authOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/auth-module&gt;
    *  &lt;/authentication-jaspi&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the authentication-jaspi configuration.
    * @param authInfo the {@code JASPIAuthenticationInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateJaspiAuthenticationPolicy(String appPolicyName, JASPIAuthenticationInfo authInfo)
         throws Exception
   {
      // validate the contents of the authentication policy defined.
      Assert.assertNotNull("Authentication policy not found", authInfo);
      Assert.assertEquals("Authentication policy has unexpected name", appPolicyName, authInfo.getName());

      // validate the login-modules stacks defined by the authentication-jaspi configuration.
      LoginModuleStackHolder[] stacks = authInfo.getLoginModuleStackHolder();
      Assert.assertNotNull("Unexpected null stack of login modules");
      Assert.assertEquals("Invalid number of stacks", 2, stacks.length);

      // check the contents of the ModuleStack1.
      LoginModuleStackHolder holder1 = stacks[0].getName().equals("ModuleStack1") ? stacks[0] : stacks[1];
      Assert.assertEquals("Invalid number of login modules for the ModuleStack1", 2,
            holder1.getAppConfigurationEntry().length);

      AppConfigurationEntry[] entries = holder1.getAppConfigurationEntry();
      Assert.assertEquals("org.jboss.security.auth.AuthModule3", entries[0].getLoginModuleName());
      Assert.assertEquals(LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption5 was not found", options.containsKey("authOption5"));
      Assert.assertEquals("value5", options.get("authOption5"));

      Assert.assertEquals("org.jboss.security.auth.AuthModule4", entries[1].getLoginModuleName());
      Assert.assertEquals(LoginModuleControlFlag.OPTIONAL, entries[1].getControlFlag());
      Assert.assertEquals(0, entries[1].getOptions().size());

      // check the contents of the ModuleStack2.
      LoginModuleStackHolder holder2 = stacks[0].getName().equals("ModuleStack2") ? stacks[0] : stacks[1];
      Assert.assertEquals("Invalid number of login modules for the ModuleStack2", 1,
            holder2.getAppConfigurationEntry().length);

      entries = holder2.getAppConfigurationEntry();
      Assert.assertEquals("org.jboss.security.auth.AuthModule5", entries[0].getLoginModuleName());
      Assert.assertEquals(LoginModuleControlFlag.REQUIRED, entries[0].getControlFlag());
      options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption6 was not found", options.containsKey("authOption6"));
      Assert.assertEquals("value6", options.get("authOption6"));
      Assert.assertTrue("Option authOption7 was not found", options.containsKey("authOption7"));
      Assert.assertEquals("value7", options.get("authOption7"));

      // validate the auth-modules defined by the authentication-jaspi configuration.
      AuthModuleEntry[] authEntries = authInfo.getAuthModuleEntry();
      Assert.assertNotNull(authEntries);
      Assert.assertEquals("Invalid number of auth-modules", 2, authEntries.length);

      // first module should be org.jboss.security.auth.AuthModule1.
      Assert.assertEquals("org.jboss.security.auth.AuthModule1", authEntries[0].getAuthModuleName());
      Assert.assertEquals("ModuleStack1", authEntries[0].getLoginModuleStackHolderName());
      options = authEntries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertEquals("Unexpected number of module options", 0, options.size());
      LoginModuleStackHolder stackHolder = authEntries[0].getLoginModuleStackHolder();
      Assert.assertNotNull("Associated LoginModuleStackHolder is null", stackHolder);
      Assert.assertEquals("Invalid LoginModuleStackHolder", holder1, stackHolder);

      // second module should be org.jboss.security.auth.AuthModule2.
      Assert.assertEquals("org.jboss.security.auth.AuthModule2", authEntries[1].getAuthModuleName());
      Assert.assertEquals("ModuleStack2", authEntries[1].getLoginModuleStackHolderName());
      options = authEntries[1].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption1 was not found", options.containsKey("authOption1"));
      Assert.assertEquals("value1", options.get("authOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("authOption2"));
      Assert.assertEquals("value2", options.get("authOption2"));
      stackHolder = authEntries[1].getLoginModuleStackHolder();
      Assert.assertNotNull("Associated LoginModuleStackHolder is null", stackHolder);
      Assert.assertEquals("Invalid LoginModuleStackHolder", holder2, stackHolder);
   }

   /**
    * <p>
    * Validates the contents of an {@code AuthorizationInfo} object that has been generated by the
    * {@code AuthorizationPolicyBean} that corresponds to the following authorization configuration:
    * 
    * <pre>
    *  &lt;authorization&gt;
    *     &lt;policy-module code=&quot;org.jboss.security.authz.AuthorizationModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;authzOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authzOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/policy-module&gt;
    *     &lt;policy-module code=&quot;org.jboss.security.authz.AuthorizationModule2&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;authzOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authzOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/policy-module&gt;
    *  &lt;/authorization&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the authorization configuration.
    * @param authzInfo the {@code AuthorizationInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateAuthorizationPolicy(String appPolicyName, AuthorizationInfo authzInfo) throws Exception
   {
      Assert.assertNotNull("Authorization policy not found", authzInfo);
      Assert.assertEquals("Authorization policy has unexpected name", appPolicyName, authzInfo.getName());

      AuthorizationModuleEntry[] entries = authzInfo.getAuthorizationModuleEntry();
      Assert.assertNotNull("Invalid null AuthorizationModuleEntry array", entries);
      Assert.assertEquals("Unexpected number of authorization entries", 2, entries.length);

      // first entry should be the org.jboss.security.authz.AuthorizationModule1.
      Assert.assertEquals("org.jboss.security.authz.AuthorizationModule1", entries[0].getPolicyModuleName());
      Assert.assertEquals("REQUIRED", entries[0].getControlFlag().toString());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authzOption1 was not found", options.containsKey("authzOption1"));
      Assert.assertEquals("value1", options.get("authzOption1"));
      Assert.assertTrue("Option authzOption2 was not found", options.containsKey("authzOption2"));
      Assert.assertEquals("value2", options.get("authzOption2"));

      // second entry should be the org.jboss.security.authz.AuthorizationModule2.
      Assert.assertEquals("org.jboss.security.authz.AuthorizationModule2", entries[1].getPolicyModuleName());
      Assert.assertEquals("REQUIRED", entries[1].getControlFlag().toString());
      options = entries[1].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authzOption3 was not found", options.containsKey("authzOption3"));
      Assert.assertEquals("value3", options.get("authzOption3"));
      Assert.assertTrue("Option authzOption4 was not found", options.containsKey("authzOption4"));
      Assert.assertEquals("value4", options.get("authzOption4"));
   }

   /**
    * <p>
    * Validates the contents of an {@code ACLInfo} object that has been generated by the {@code ACLPolicyBean} that
    * corresponds to the following acl configuration:
    * 
    * <pre>
    *  &lt;acl&gt;
    *     &lt;acl-module code=&quot;org.jboss.security.authz.AuthorizationModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;aclOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;aclOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/acl-module&gt;
    *     &lt;acl-module code=&quot;org.jboss.security.authz.AuthorizationModule2&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;aclOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;aclOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/acl-module&gt;
    *  &lt;/acl&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the acl configuration.
    * @param aclInfo the {@code ACLInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateACLPolicy(String appPolicyName, ACLInfo aclInfo) throws Exception
   {
      Assert.assertNotNull("ACL policy not found", aclInfo);
      Assert.assertEquals("ACL policy has unexpected name", appPolicyName, aclInfo.getName());

      ACLProviderEntry[] entries = aclInfo.getACLProviderEntry();
      Assert.assertNotNull("Invalid null ACLProviderEntry array", entries);
      Assert.assertEquals("Unexpected number of acl entries", 2, entries.length);

      // first entry should be the org.jboss.security.authz.ACLModule1.
      Assert.assertEquals("org.jboss.security.authz.ACLModule1", entries[0].getAclProviderName());
      Assert.assertEquals("REQUIRED", entries[0].getControlFlag().toString());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option aclOption1 was not found", options.containsKey("aclOption1"));
      Assert.assertEquals("value1", options.get("aclOption1"));
      Assert.assertTrue("Option aclOption2 was not found", options.containsKey("aclOption2"));
      Assert.assertEquals("value2", options.get("aclOption2"));

      // second entry should be the org.jboss.security.authz.ACLModule2.
      Assert.assertEquals("org.jboss.security.authz.ACLModule2", entries[1].getAclProviderName());
      Assert.assertEquals("REQUIRED", entries[1].getControlFlag().toString());
      options = entries[1].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option aclOption3 was not found", options.containsKey("aclOption3"));
      Assert.assertEquals("value3", options.get("aclOption3"));
      Assert.assertTrue("Option aclOption4 was not found", options.containsKey("aclOption4"));
      Assert.assertEquals("value4", options.get("aclOption4"));
   }

   /**
    * <p>
    * Validates the contents of a {@code MappingInfo} object that has been generated by the {@code MappingPolicyBean}
    * that corresponds to the following rolemapping configuration:
    * 
    * <pre>
    *  &lt;rolemapping&gt;
    *     &lt;mapping-module code=&quot;org.jboss.security.mapping.RoleMappingModule1&quot;&gt;
    *        &lt;module-option name=&quot;mappingOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;mappingOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/mapping-module&gt;
    *     &lt;mapping-module code=&quot;org.jboss.security.mapping.RoleMappingModule2&quot;&gt;
    *        &lt;module-option name=&quot;mappingOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;mappingOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/mapping-module&gt;
    *  &lt;/rolemapping&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the rolemapping configuration.
    * @param mappingInfo the {@code MappingInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateRoleMappingPolicy(String appPolicyName, MappingInfo mappingInfo) throws Exception
   {
      Assert.assertNotNull("Role-mapping policy not found", mappingInfo);
      Assert.assertEquals("Role-mapping policy has unexpected name", appPolicyName, mappingInfo.getName());

      MappingModuleEntry[] entries = mappingInfo.getMappingModuleEntry();
      Assert.assertNotNull("Invalid null MappingModuleEntry array", entries);
      Assert.assertEquals("Unexpected number of role-mapping entries", 2, entries.length);

      // first entry should be the org.jboss.security.mapping.RoleMappingModule1.
      Assert.assertEquals("org.jboss.security.mapping.RoleMappingModule1", entries[0].getMappingModuleName());
      Assert.assertEquals("role", entries[0].getMappingModuleType());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option mappingOption1 was not found", options.containsKey("mappingOption1"));
      Assert.assertEquals("value1", options.get("mappingOption1"));
      Assert.assertTrue("Option mappingOption2 was not found", options.containsKey("mappingOption2"));
      Assert.assertEquals("value2", options.get("mappingOption2"));

      // second entry should be the org.jboss.security.mapping.RoleMappingModule2.
      Assert.assertEquals("org.jboss.security.mapping.RoleMappingModule2", entries[1].getMappingModuleName());
      Assert.assertEquals("role", entries[1].getMappingModuleType());
      options = entries[1].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option mappingOption3 was not found", options.containsKey("mappingOption3"));
      Assert.assertEquals("value3", options.get("mappingOption3"));
      Assert.assertTrue("Option mappingOption4 was not found", options.containsKey("mappingOption4"));
      Assert.assertEquals("value4", options.get("mappingOption4"));
   }

   /**
    * <p>
    * Validates the contents of a {@code MappingInfo} object that has been generated by the {@code MappingPolicyBean}
    * that corresponds to the following mapping configuration:
    * 
    * <pre>
    *     &lt;mapping&gt;
    *        &lt;mapping-module code=&quot;org.jboss.security.mapping.MappingModule1&quot; type=&quot;role&quot;&gt;
    *           &lt;module-option name=&quot;mappingOption1&quot;&gt;value1&lt;/module-option&gt;
    *           &lt;module-option name=&quot;mappingOption2&quot;&gt;value2&lt;/module-option&gt;
    *        &lt;/mapping-module&gt;
    *        &lt;mapping-module code=&quot;org.jboss.security.mapping.MappingModule2&quot; type=&quot;principal&quot;&gt;
    *           &lt;module-option name=&quot;mappingOption3&quot;&gt;value3&lt;/module-option&gt;
    *           &lt;module-option name=&quot;mappingOption4&quot;&gt;value4&lt;/module-option&gt;
    *        &lt;/mapping-module&gt;
    *     &lt;/mapping&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the mapping configuration.
    * @param mappingInfo the {@code MappingInfo} instance being validated.
    * @param mappingType the type of mapping provided by the {@code MappingInfo}.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateMappingPolicy(String appPolicyName, MappingInfo mappingInfo, String mappingType)
         throws Exception
   {
      Assert.assertNotNull("Mapping policy not found", mappingInfo);
      Assert.assertEquals("Mapping policy has unexpected name", appPolicyName, mappingInfo.getName());

      MappingModuleEntry[] entries = mappingInfo.getMappingModuleEntry();
      Assert.assertNotNull("Invalid null MappingModuleEntry array", entries);
      Assert.assertEquals("Unexpected number of mapping entries", 1, entries.length);

      if (mappingType.equals("role"))
      {
         // entry should be the org.jboss.security.mapping.MappingModule1.
         Assert.assertEquals("org.jboss.security.mapping.MappingModule1", entries[0].getMappingModuleName());
         Assert.assertEquals("role", entries[0].getMappingModuleType());
         Map<String, ?> options = entries[0].getOptions();
         Assert.assertNotNull("Unexpected null options map", options);
         Assert.assertTrue("Option mappingOption1 was not found", options.containsKey("mappingOption1"));
         Assert.assertEquals("value1", options.get("mappingOption1"));
         Assert.assertTrue("Option mappingOption2 was not found", options.containsKey("mappingOption2"));
         Assert.assertEquals("value2", options.get("mappingOption2"));
      }
      else if (mappingType.equals("principal"))
      {
         // entry should be the org.jboss.security.mapping.MappingModule2.
         Assert.assertEquals("org.jboss.security.mapping.MappingModule2", entries[0].getMappingModuleName());
         Assert.assertEquals("principal", entries[0].getMappingModuleType());
         Map<String, ?> options = entries[0].getOptions();
         Assert.assertNotNull("Unexpected null options map", options);
         Assert.assertTrue("Option mappingOption3 was not found", options.containsKey("mappingOption3"));
         Assert.assertEquals("value3", options.get("mappingOption3"));
         Assert.assertTrue("Option mappingOption4 was not found", options.containsKey("mappingOption4"));
         Assert.assertEquals("value4", options.get("mappingOption4"));
      }
      else
      {
         Assert.fail("Cannot validate MappingInfo of type " + mappingType);
      }
   }

   /**
    * <p>
    * Validates the contents of an {@code AuditInfo} object that has been generated by the {@code AuditPolicyBean} that
    * corresponds to the following audit configuration:
    * 
    * <pre>
    *  &lt;audit&gt;
    *     &lt;provider-module code=&quot;org.jboss.security.audit.AuditModule1&quot;&gt;
    *        &lt;module-option name=&quot;auditOption1&quot;&gt;value1&lt;/module-option&gt;
    *     &lt;/provider-module&gt;
    *     &lt;provider-module code=&quot;org.jboss.security.audit.AuditModule2&quot;&gt;
    *        &lt;module-option name=&quot;auditOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/provider-module&gt;
    *  &lt;/audit&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the audit configuration.
    * @param auditInfo the {@code AuditInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateAuditPolicy(String appPolicyName, AuditInfo auditInfo) throws Exception
   {
      Assert.assertNotNull("Audit policy not found", auditInfo);
      Assert.assertEquals("Audit policy has unexpected name", appPolicyName, auditInfo.getName());

      AuditProviderEntry[] entries = auditInfo.getAuditProviderEntry();
      Assert.assertNotNull("Invalid null AuditProviderEntry array", entries);
      Assert.assertEquals("Unexpected number of audit entries", 2, entries.length);

      // first entry should be the org.jboss.security.audit.AuditModule1.
      Assert.assertEquals("org.jboss.security.audit.AuditModule1", entries[0].getName());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option auditOption1 was not found", options.containsKey("auditOption1"));
      Assert.assertEquals("value1", options.get("auditOption1"));

      // second entry should be the org.jboss.security.audit.AuditModule2.
      Assert.assertEquals("org.jboss.security.audit.AuditModule2", entries[1].getName());
      options = entries[1].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option auditOption2 was not found", options.containsKey("auditOption2"));
      Assert.assertEquals("value2", options.get("auditOption2"));
   }

   /**
    * <p>
    * Validates the contents of an {@code IdentityTrustInfo} object that has been generated by the
    * {@code IdentityTrustPolicyBean} that corresponds to the following identity-trust configuration:
    * 
    * <pre>
    *  &lt;identity-trust&gt;
    *     &lt;trust-module code=&quot;org.jboss.security.trust.IdentityTrustModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;trustOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;trustOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/trust-module&gt;
    *  &lt;/identity-trust&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param appPolicyName the name of the application-policy that specifies the identity-trust configuration.
    * @param trustInfo the {@code IdentityTrustInfo} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateIdentityTrustPolicy(String appPolicyName, IdentityTrustInfo trustInfo) throws Exception
   {
      Assert.assertNotNull("Identity-trust policy not found", trustInfo);
      Assert.assertEquals("Identity-trust policy has unexpected name", appPolicyName, trustInfo.getName());

      IdentityTrustModuleEntry[] entries = trustInfo.getIdentityTrustModuleEntry();
      Assert.assertNotNull("Invalid null IdentityTrustModuleEntry array", entries);
      Assert.assertEquals("Unexpected number of identity-trust entries", 1, entries.length);

      // first entry should be the org.jboss.security.trust.IdentityTrustModule1.
      Assert.assertEquals("org.jboss.security.trust.IdentityTrustModule1", entries[0].getName());
      Assert.assertEquals("REQUIRED", entries[0].getControlFlag().toString());
      Map<String, ?> options = entries[0].getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option trustOption1 was not found", options.containsKey("trustOption1"));
      Assert.assertEquals("value1", options.get("trustOption1"));
      Assert.assertTrue("Option trustOption2 was not found", options.containsKey("trustOption2"));
      Assert.assertEquals("value2", options.get("trustOption2"));
   }
}
