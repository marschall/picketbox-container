/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors. 
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.jboss.test.security.microcontainer.metadata;

import java.util.List;
import java.util.Map;

import junit.framework.Assert;

import org.jboss.security.microcontainer.beans.ACLPolicyBean;
import org.jboss.security.microcontainer.beans.AuditPolicyBean;
import org.jboss.security.microcontainer.beans.AuthenticationPolicyBean;
import org.jboss.security.microcontainer.beans.AuthorizationPolicyBean;
import org.jboss.security.microcontainer.beans.BasePolicyModule;
import org.jboss.security.microcontainer.beans.FlaggedPolicyModule;
import org.jboss.security.microcontainer.beans.IdentityTrustPolicyBean;
import org.jboss.security.microcontainer.beans.JASPIAuthenticationPolicyBean;
import org.jboss.security.microcontainer.beans.LoginModuleStackBean;
import org.jboss.security.microcontainer.beans.MappingPolicyBean;
import org.jboss.security.microcontainer.beans.MappingPolicyModule;
import org.jboss.security.microcontainer.beans.StackRefPolicyModule;

/**
 * <p>
 * This class validates the contents of the beans that are generated by the {@code ApplicationPolicyMetaDataFactory} in
 * the various application-policy test scenarios.
 * </p>
 * 
 * @author <a href="mailto:sguilhen@redhat.com">Stefan Guilhen</a>
 */
public class BeanValidator
{

   /**
    * <p>
    * Validates the contents of an {@code AuthenticationPolicyBean} generated by the metadata factory from an
    * authentication configuration like the following:
    * 
    * <pre>
    *  &lt;authentication&gt;
    *     &lt;login-module code=&quot;org.jboss.security.auth.AuthModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;authOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/login-module&gt;
    *     &lt;login-module code=&quot;org.jboss.security.auth.AuthModule2&quot; flag=&quot;optional&quot;&gt;
    *        &lt;module-option name=&quot;authOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/login-module&gt;
    *  &lt;/authentication&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code AuthenticationPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateAuthenticationBean(AuthenticationPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the login-modules that have been specified in the authentication configuration.
      List<FlaggedPolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 2, modules.size());

      // first module should be the org.jboss.security.auth.AuthModule1.
      Assert.assertEquals("org.jboss.security.auth.AuthModule1", modules.get(0).getCode());
      Assert.assertEquals("required", modules.get(0).getFlag());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption1 was not found", options.containsKey("authOption1"));
      Assert.assertEquals("value1", options.get("authOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("authOption2"));
      Assert.assertEquals("value2", options.get("authOption2"));

      // second module should be the org.jboss.security.auth.AuthModule2.
      Assert.assertEquals("org.jboss.security.auth.AuthModule2", modules.get(1).getCode());
      Assert.assertEquals("optional", modules.get(1).getFlag());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption3 was not found", options.containsKey("authOption3"));
      Assert.assertEquals("value3", options.get("authOption3"));
      Assert.assertTrue("Option authOption4 was not found", options.containsKey("authOption4"));
      Assert.assertEquals("value4", options.get("authOption4"));
   }

   /**
    * <p>
    * Validates the contents of a {@code JASPIAuthenticationPolicyBean} generated by the metadata factory from an
    * authentication-jaspi configuration like the following:
    * 
    * <pre>
    *  &lt;authentication-jaspi&gt;
    *     &lt;login-module-stack name=&quot;ModuleStack1&quot;&gt;
    *        &lt;login-module code=&quot;org.jboss.security.auth.AuthModule3&quot; flag=&quot;required&quot;&gt;
    *           &lt;module-option name=&quot;authOption5&quot;&gt;value5&lt;/module-option&gt;
    *        &lt;/login-module&gt;
    *        &lt;login-module code=&quot;org.jboss.security.auth.AuthModule4&quot; flag=&quot;optional&quot;/&gt;
    *     &lt;/login-module-stack&gt;
    *     &lt;login-module-stack name=&quot;ModuleStack2&quot;&gt;
    *        &lt;login-module code=&quot;org.jboss.security.auth.AuthModule5&quot; flag=&quot;required&quot;&gt;
    *           &lt;module-option name=&quot;authOption6&quot;&gt;value6&lt;/module-option&gt;
    *           &lt;module-option name=&quot;authOption7&quot;&gt;value7&lt;/module-option&gt;
    *        &lt;/login-module&gt;
    *     &lt;/login-module-stack&gt;
    *     &lt;auth-module code=&quot;org.jboss.security.auth.AuthModule1&quot; login-module-stack-ref=&quot;ModuleStack1&quot;/&gt;
    *     &lt;auth-module code=&quot;org.jboss.security.auth.AuthModule2&quot; login-module-stack-ref=&quot;ModuleStack2&quot;&gt;
    *        &lt;module-option name=&quot;authOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/auth-module&gt;
    *  &lt;/authentication-jaspi&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code JASPIAuthenticationPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateJaspiAuthenticationBean(JASPIAuthenticationPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the stacks of login-modules that have been specified in the authentication-jaspi configuration.
      List<LoginModuleStackBean> stacks = bean.getModuleStacks();
      Assert.assertNotNull("Invalid null list of stacks found", stacks);
      Assert.assertEquals("Invalid number of stacks", 2, stacks.size());

      // validate the contents of the first stack.
      Assert.assertEquals("Invalid stack name", "ModuleStack1", stacks.get(0).getName());
      List<FlaggedPolicyModule> modules = stacks.get(0).getLoginModules();
      Assert.assertNotNull(modules);
      Assert.assertEquals("Invalid number of modules in stack", 2, modules.size());

      Assert.assertEquals("org.jboss.security.auth.AuthModule3", modules.get(0).getCode());
      Assert.assertEquals("required", modules.get(0).getFlag());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption5 was not found", options.containsKey("authOption5"));
      Assert.assertEquals("value5", options.get("authOption5"));

      Assert.assertEquals("org.jboss.security.auth.AuthModule4", modules.get(1).getCode());
      Assert.assertEquals("optional", modules.get(1).getFlag());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertEquals(0, options.size());

      // validate the contents of the second stack.
      Assert.assertEquals("Invalid stack name", "ModuleStack2", stacks.get(1).getName());
      modules = stacks.get(1).getLoginModules();
      Assert.assertNotNull(modules);
      Assert.assertEquals("Invalid number of modules in stack", 1, modules.size());

      Assert.assertEquals("org.jboss.security.auth.AuthModule5", modules.get(0).getCode());
      Assert.assertEquals("required", modules.get(0).getFlag());
      options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption6 was not found", options.containsKey("authOption6"));
      Assert.assertEquals("value6", options.get("authOption6"));
      Assert.assertTrue("Option authOption7 was not found", options.containsKey("authOption7"));
      Assert.assertEquals("value7", options.get("authOption7"));

      // check the auth-modules that have been specified in the authentication-jaspi configuration.
      List<StackRefPolicyModule> authModules = bean.getModules();
      Assert.assertNotNull("Invalid null list of auth-modules found", authModules);
      Assert.assertEquals("Invalid number of modules", 2, authModules.size());

      // first module should be org.jboss.security.auth.AuthModule1.
      Assert.assertEquals("org.jboss.security.auth.AuthModule1", authModules.get(0).getCode());
      Assert.assertEquals("ModuleStack1", authModules.get(0).getStackRef());
      options = authModules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertEquals("Unexpected number of module options", 0, options.size());

      // second module should be org.jboss.security.auth.AuthModule2.
      Assert.assertEquals("org.jboss.security.auth.AuthModule2", authModules.get(1).getCode());
      Assert.assertEquals("ModuleStack2", authModules.get(1).getStackRef());
      options = authModules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authOption1 was not found", options.containsKey("authOption1"));
      Assert.assertEquals("value1", options.get("authOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("authOption2"));
      Assert.assertEquals("value2", options.get("authOption2"));
   }

   /**
    * <p>
    * Validates the contents of an {@code AuthorizationPolicyBean} generated by the metadata factory from an
    * authorization configuration like the following:
    * 
    * <pre>
    *  &lt;authorization&gt;
    *     &lt;policy-module code=&quot;org.jboss.security.authz.AuthorizationModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;authzOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authzOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/policy-module&gt;
    *     &lt;policy-module code=&quot;org.jboss.security.authz.AuthorizationModule2&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;authzOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;authzOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/policy-module&gt;
    *  &lt;/authorization&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code AuthorizationPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateAuthorizationBean(AuthorizationPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the policy-modules that have been specified in the authorization configuration.
      List<FlaggedPolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 2, modules.size());

      // first module should be the org.jboss.security.authz.AuthorizationModule1.
      Assert.assertEquals("org.jboss.security.authz.AuthorizationModule1", modules.get(0).getCode());
      Assert.assertEquals("required", modules.get(0).getFlag());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authzOption1 was not found", options.containsKey("authzOption1"));
      Assert.assertEquals("value1", options.get("authzOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("authzOption2"));
      Assert.assertEquals("value2", options.get("authzOption2"));

      // second module should be the org.jboss.security.authz.AuthorizationModule2.
      Assert.assertEquals("org.jboss.security.authz.AuthorizationModule2", modules.get(1).getCode());
      Assert.assertEquals("required", modules.get(1).getFlag());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option authzOption3 was not found", options.containsKey("authzOption3"));
      Assert.assertEquals("value3", options.get("authzOption3"));
      Assert.assertTrue("Option authzOption4 was not found", options.containsKey("authzOption4"));
      Assert.assertEquals("value4", options.get("authzOption4"));
   }

   /**
    * <p>
    * Validates the contents of an {@code ACLPolicyBean} generated by the metadata factory from an acl configuration
    * like the following:
    * 
    * <pre>
    *  &lt;acl&gt;
    *     &lt;acl-module code=&quot;org.jboss.security.authz.ACLModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;aclOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;aclOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/acl-module&gt;
    *     &lt;acl-module code=&quot;org.jboss.security.authz.ACLModule2&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;aclOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;aclOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/acl-module&gt;
    *  &lt;/acl&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code ACLPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateACLBean(ACLPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the acl-modules that have been specified in the acl configuration.
      List<FlaggedPolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 2, modules.size());

      // first module should be the org.jboss.security.authz.ACLModule1.
      Assert.assertEquals("org.jboss.security.authz.ACLModule1", modules.get(0).getCode());
      Assert.assertEquals("required", modules.get(0).getFlag());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option aclOption1 was not found", options.containsKey("aclOption1"));
      Assert.assertEquals("value1", options.get("aclOption1"));
      Assert.assertTrue("Option aclOption2 was not found", options.containsKey("aclOption2"));
      Assert.assertEquals("value2", options.get("aclOption2"));

      // second module should be the org.jboss.security.authz.ACLModule2.
      Assert.assertEquals("org.jboss.security.authz.ACLModule2", modules.get(1).getCode());
      Assert.assertEquals("required", modules.get(1).getFlag());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option aclOption3 was not found", options.containsKey("aclOption3"));
      Assert.assertEquals("value3", options.get("aclOption3"));
      Assert.assertTrue("Option aclOption4 was not found", options.containsKey("aclOption4"));
      Assert.assertEquals("value4", options.get("aclOption4"));
   }

   /**
    * <p>
    * Validates the contents of a {@code MappingPolicyBean} generated by the metadata factory from a role-mapping
    * configuration like the following:
    * 
    * <pre>
    *  &lt;rolemapping&gt;
    *     &lt;mapping-module code=&quot;org.jboss.security.mapping.RoleMappingModule1&quot;&gt;
    *        &lt;module-option name=&quot;mappingOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;mappingOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/mapping-module&gt;
    *     &lt;mapping-module code=&quot;org.jboss.security.mapping.RoleMappingModule2&quot;&gt;
    *        &lt;module-option name=&quot;mappingOption3&quot;&gt;value3&lt;/module-option&gt;
    *        &lt;module-option name=&quot;mappingOption4&quot;&gt;value4&lt;/module-option&gt;
    *     &lt;/mapping-module&gt;
    *  &lt;/rolemapping&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code MappingPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateRoleMappingBean(MappingPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the policy-modules that have been specified in the role-mapping configuration.
      List<MappingPolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 2, modules.size());

      // first module should be the org.jboss.security.mapping.RoleMappingModule1.
      Assert.assertEquals("org.jboss.security.mapping.RoleMappingModule1", modules.get(0).getCode());
      Assert.assertEquals("role", modules.get(0).getType());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option mappingOption1 was not found", options.containsKey("mappingOption1"));
      Assert.assertEquals("value1", options.get("mappingOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("mappingOption2"));
      Assert.assertEquals("value2", options.get("mappingOption2"));

      // second module should be the org.jboss.security.mapping.RoleMappingModule2.
      Assert.assertEquals("org.jboss.security.mapping.RoleMappingModule2", modules.get(1).getCode());
      Assert.assertEquals("role", modules.get(1).getType());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option mappingOption3 was not found", options.containsKey("mappingOption3"));
      Assert.assertEquals("value3", options.get("mappingOption3"));
      Assert.assertTrue("Option mappingOption4 was not found", options.containsKey("mappingOption4"));
      Assert.assertEquals("value4", options.get("mappingOption4"));
   }

   /**
    * <p>
    * Validates the contents of a {@code MappingPolicyBean} generated by the metadata factory from a mapping
    * configuration like the following:
    * 
    * <pre>
    *     &lt;mapping&gt;
    *        &lt;mapping-module code=&quot;org.jboss.security.mapping.MappingModule1&quot; type=&quot;role&quot;&gt;
    *           &lt;module-option name=&quot;mappingOption1&quot;&gt;value1&lt;/module-option&gt;
    *           &lt;module-option name=&quot;mappingOption2&quot;&gt;value2&lt;/module-option&gt;
    *        &lt;/mapping-module&gt;
    *        &lt;mapping-module code=&quot;org.jboss.security.mapping.MappingModule2&quot; type=&quot;principal&quot;&gt;
    *           &lt;module-option name=&quot;mappingOption3&quot;&gt;value3&lt;/module-option&gt;
    *           &lt;module-option name=&quot;mappingOption4&quot;&gt;value4&lt;/module-option&gt;
    *        &lt;/mapping-module&gt;
    *     &lt;/mapping&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code MappingPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateMappingBean(MappingPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the policy-modules that have been specified in the mapping configuration.
      List<MappingPolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 2, modules.size());

      // first module should be the org.jboss.security.mapping.MappingModule1.
      Assert.assertEquals("org.jboss.security.mapping.MappingModule1", modules.get(0).getCode());
      Assert.assertEquals("role", modules.get(0).getType());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option mappingOption1 was not found", options.containsKey("mappingOption1"));
      Assert.assertEquals("value1", options.get("mappingOption1"));
      Assert.assertTrue("Option authOption2 was not found", options.containsKey("mappingOption2"));
      Assert.assertEquals("value2", options.get("mappingOption2"));

      // second module should be the org.jboss.security.mapping.MappingModule2.
      Assert.assertEquals("org.jboss.security.mapping.MappingModule2", modules.get(1).getCode());
      Assert.assertEquals("principal", modules.get(1).getType());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option mappingOption3 was not found", options.containsKey("mappingOption3"));
      Assert.assertEquals("value3", options.get("mappingOption3"));
      Assert.assertTrue("Option mappingOption4 was not found", options.containsKey("mappingOption4"));
      Assert.assertEquals("value4", options.get("mappingOption4"));
   }

   /**
    * <p>
    * Validates the contents of an {@code AuditPolicyBean} generated by the metadata factory from an audit configuration
    * like the following:
    * 
    * <pre>
    *  &lt;audit&gt;
    *     &lt;provider-module code=&quot;org.jboss.security.audit.AuditModule1&quot;&gt;
    *        &lt;module-option name=&quot;auditOption1&quot;&gt;value1&lt;/module-option&gt;
    *     &lt;/provider-module&gt;
    *     &lt;provider-module code=&quot;org.jboss.security.audit.AuditModule2&quot;&gt;
    *        &lt;module-option name=&quot;auditOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/provider-module&gt;
    *  &lt;/audit&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code AuditPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateAuditBean(AuditPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the policy-modules that have been specified in the audit configuration.
      List<BasePolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 2, modules.size());

      // first module should be the org.jboss.security.audit.AuditModule1.
      Assert.assertEquals("org.jboss.security.audit.AuditModule1", modules.get(0).getCode());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option auditOption1 was not found", options.containsKey("auditOption1"));
      Assert.assertEquals("value1", options.get("auditOption1"));

      // second module should be the org.jboss.security.audit.AuditModule2.
      Assert.assertEquals("org.jboss.security.audit.AuditModule2", modules.get(1).getCode());
      options = modules.get(1).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option auditOption2 was not found", options.containsKey("auditOption2"));
      Assert.assertEquals("value2", options.get("auditOption2"));
   }

   /**
    * <p>
    * Validates the contents of an {@code IdentityTrustPolicyBean} generated by the metadata factory from an
    * identity-trust configuration like the following:
    * 
    * <pre>
    *  &lt;identity-trust&gt;
    *     &lt;trust-module code=&quot;org.jboss.security.trust.IdentityTrustModule1&quot; flag=&quot;required&quot;&gt;
    *        &lt;module-option name=&quot;trustOption1&quot;&gt;value1&lt;/module-option&gt;
    *        &lt;module-option name=&quot;trustOption2&quot;&gt;value2&lt;/module-option&gt;
    *     &lt;/trust-module&gt;
    *  &lt;/identity-trust&gt;
    * </pre>
    * 
    * </p>
    * 
    * @param bean the {@code IdentityTrustPolicyBean} instance being validated.
    * @throws Exception if an error occurs while running the validation tests.
    */
   public static void validateIdentityTrustBean(IdentityTrustPolicyBean bean) throws Exception
   {
      Assert.assertNotNull("Invalid null bean", bean);

      // check the policy-modules that have been specified in the identity-trust configuration.
      List<FlaggedPolicyModule> modules = bean.getModules();
      Assert.assertNotNull("Invalid null list of modules found", modules);
      Assert.assertEquals("Invalid number of modules", 1, modules.size());

      // first module should be the org.jboss.security.trust.IdentityTrustModule1.
      Assert.assertEquals("org.jboss.security.trust.IdentityTrustModule1", modules.get(0).getCode());
      Map<String, ?> options = modules.get(0).getOptions();
      Assert.assertNotNull("Unexpected null options map", options);
      Assert.assertTrue("Option trustOption1 was not found", options.containsKey("trustOption1"));
      Assert.assertEquals("value1", options.get("trustOption1"));
      Assert.assertTrue("Option trustOption2 was not found", options.containsKey("trustOption2"));
      Assert.assertEquals("value2", options.get("trustOption2"));
   }
}
